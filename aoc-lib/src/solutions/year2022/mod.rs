// --- This file was auto-generated by build.rs ---

#[allow(unused_imports)]
use crate::solution::{SolutionStatic, SolutionType};
use crate::util::YearDay;
use std::collections::HashMap;

// Module definitions
pub mod day01;
pub mod day02;
pub mod day03;
pub mod day04;
pub mod day05;
pub mod day06;
pub mod day07;
pub mod day08;
pub mod day09;
pub mod day10;
pub mod day11;
pub mod day12;
pub mod day13;
pub mod day14;
pub mod day15;
pub mod day16;
pub mod day17;
pub mod day18;
pub mod day19;
pub mod day20;
pub mod day21;
pub mod day22;
pub mod day23;

// Re-exports
pub use day01::Day01;
pub use day02::Day02;
pub use day03::Day03;
pub use day04::Day04;
pub use day05::Day05;
pub use day06::Day06;
pub use day07::Day07;
pub use day08::Day08;
pub use day09::Day09;
pub use day10::Day10;
pub use day11::Day11;
pub use day12::Day12;
pub use day13::Day13;
pub use day14::Day14;
pub use day15::Day15;
pub use day16::Day16;
pub use day17::Day17;
pub use day18::Day18;
pub use day19::Day19;
pub use day20::Day20;
pub use day21::Day21;
pub use day22::Day22;
pub use day23::Day23;

// List of solutions
#[allow(unused_mut)]
pub fn create_list() -> Vec<SolutionType> {
    let mut list = vec![
        Day01::as_type(),
        Day02::as_type(),
        Day03::as_type(),
        Day04::as_type(),
        Day05::as_type(),
        Day06::as_type(),
        Day07::as_type(),
        Day08::as_type(),
        Day09::as_type(),
        Day10::as_type(),
        Day11::as_type(),
        Day12::as_type(),
        Day13::as_type(),
        Day14::as_type(),
        Day15::as_type(),
        Day16::as_type(),
        Day17::as_type(),
        Day18::as_type(),
        Day19::as_type(),
        Day20::as_type(),
        Day21::as_type(),
        Day22::as_type(),
        Day23::as_type(),
    ];

    list
}

// Map of solutions
pub fn create_map() -> HashMap<YearDay, Vec<SolutionType>> {
    let mut map = HashMap::new();
    create_list().into_iter().for_each(|x| {
        let key = YearDay::new(x.info.year, x.info.day);
        map.entry(key).or_insert_with(|| Vec::new()).push(x);
    });

    map
}
