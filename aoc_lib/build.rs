use regex::Regex;
use std::{error::Error, fs, io::Write};

const SOLUTION_MODULE: &'static str = "src/solutions.rs";
const SOLUTION_DIRECTORY: &'static str = "src/solutions/";

fn main() {
    println!("cargo:rerun-if-changed={SOLUTION_DIRECTORY}");
    if let Err(e) = generate_module() {
        eprintln!("Error: {}", e);
    }
}

fn generate_module() -> Result<(), Box<dyn Error>> {
    let solution_module_re = Regex::new(r"^(day\S+).rs$")?;
    let struct_name_re = Regex::new(r"pub struct (Day[a-zA-Z0-9]+)")?;

    let mut module_lines: Vec<String> = Vec::new();
    let mut export_lines: Vec<String> = Vec::new();
    let mut vec_lines: Vec<String> = Vec::new();

    for entry in fs::read_dir(SOLUTION_DIRECTORY)? {
        let entry = entry?;
        let file_name = entry.file_name().into_string().unwrap();
        let captures = solution_module_re.captures(&file_name);
        if let Some(captures) = captures {
            if let Some(m) = captures.get(1) {
                let mod_name = m.as_str();
                module_lines.push(format!("mod {};", mod_name));

                let contents =
                    fs::read_to_string(format!("{}/{}", SOLUTION_DIRECTORY, &file_name))?;

                if let Some(captures) = struct_name_re.captures(&contents) {
                    captures.iter().skip(1).for_each(|m| {
                        if let Some(m) = m {
                            let struct_name = m.as_str();
                            export_lines.push(format!("pub use {mod_name}::{struct_name};"));
                            vec_lines.push(format!("        {struct_name}::as_type(),"))
                        }
                    });
                }
            }
        }
    }

    let output = [
        "// --- This file was auto-generated by build.rs ---\n",
        "// Module definitions",
        &module_lines.join("\n"),
        "\n// Re-exports",
        &export_lines.join("\n"),
        "\n// List of solutions",
        "use crate::solution::{SolutionStatic, SolutionType};",
        "pub fn solution_list() -> Vec<SolutionType> {",
        "    vec![",
        &vec_lines.join("\n"),
        "    ]",
        "}\n",
    ];

    let mut file = std::fs::File::create(SOLUTION_MODULE)?;
    file.write_all(output.join("\n").as_bytes())?;

    Ok(())
}
